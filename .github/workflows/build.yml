name: build

on:
  push:
    branches:
      - main
      - release-test

jobs:
  release:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

#      - name: Extract Version
#        id: extract_version
#        run: echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
#
#      - name: Check Existing Release
#        id: check_release
#        run: |
#          STATUSCODE=$(curl -s -o /dev/null -I -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.extract_version.outputs.version }})
#
#          if test $STATUSCODE -n 200; then
#            echo "Release with version v${{ steps.extract_version.outputs.version }} already exists. Exiting..."
#            exit 1
#          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17

#      - name: Build Jar
#        run: mvn --no-transfer-progress -Dmaven.test.skip=true clean package

      - name: Publish package
        run: mvn --no-transfer-progress -Dmaven.test.skip=true --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Upload Jar
#        uses: meeDamian/github-release@2.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          tag: v${{ steps.extract_version.outputs.version }}
#          name: neo4j-spatial ${{ steps.extract_version.outputs.version }}
#          gzip: false
#          files: target/*.jar
#
